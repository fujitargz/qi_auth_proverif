Process 0 (that is, the initial process):
{1}let spkPTx: spkey = spk(sskPTx) in
{2}out(c, spkPTx);
{3}new sskCA: sskey;
{4}let spkCA: spkey = spk(sskCA) in
{5}out(c, spkCA);
{6}let productUnitCert: bitstring = sign((IDPTx,spkPTx),sskCA) in
(
    {7}!
    {8}let cachedDigest: bitstring = hash(productUnitCert) in
    {9}new nonce: bitstring;
    {10}out(c, (VERSION,CHALLENGE,nonce));
    {11}in(c, (v_chalAuth: version,msg_chalAuth: msgType,hLSB_chalAuth: bitstring,sig: bitstring));
    {12}if (v_chalAuth = VERSION) then
    {13}if (msg_chalAuth = CHALLENGE_AUTH) then
    {14}if (hLSB_chalAuth = LSB(cachedDigest)) then
    {15}if checksign((cachedDigest,VERSION,CHALLENGE,nonce,v_chalAuth,msg_chalAuth,hLSB_chalAuth),sig,spkPTx) then
    {16}if (cachedDigest = hash(productUnitCert)) then
        {17}event revoked(spkPTx)
    else
        {18}event successAuth(spkPTx)
) | (
    {19}!
    {20}let IDPTx_1: ID = IDPTx in
    {21}let sskPTx_1: sskey = sskPTx in
    {22}in(c, (v_chal: version,msg_chal: msgType,nonce_chal: bitstring));
    {23}if (v_chal = VERSION) then
    {24}if (msg_chal = CHALLENGE) then
    {25}let h: bitstring = hash(productUnitCert) in
    {26}let hLSB: bitstring = LSB(h) in
    {27}let sig_1: bitstring = sign((h,v_chal,msg_chal,nonce_chal,VERSION,CHALLENGE_AUTH,hLSB),sskPTx_1) in
    {28}event sendResp(sskPTx_1);
    {29}out(c, (VERSION,CHALLENGE_AUTH,hLSB,sig_1))
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}let spkPTx: spkey = spk(sskPTx) in
{2}out(c, spkPTx);
{3}new sskCA: sskey;
{4}let spkCA: spkey = spk(sskCA) in
{5}out(c, spkCA);
{6}let productUnitCert: bitstring = sign((IDPTx,spkPTx),sskCA) in
(
    {7}!
    {9}new nonce: bitstring;
    {10}out(c, (VERSION,CHALLENGE,nonce));
    {11}in(c, (v_chalAuth: version,msg_chalAuth: msgType,hLSB_chalAuth: bitstring,sig: bitstring));
    {12}if (v_chalAuth = VERSION) then
    {13}if (msg_chalAuth = CHALLENGE_AUTH) then
    {8}let cachedDigest: bitstring = hash(productUnitCert) in
    {14}if (hLSB_chalAuth = LSB(cachedDigest)) then
    {15}if checksign((cachedDigest,VERSION,CHALLENGE,nonce,v_chalAuth,msg_chalAuth,hLSB_chalAuth),sig,spkPTx) then
    {16}if (cachedDigest = hash(productUnitCert)) then
        {17}event revoked(spkPTx)
    else
        {18}event successAuth(spkPTx)
) | (
    {19}!
    {22}in(c, (v_chal: version,msg_chal: msgType,nonce_chal: bitstring));
    {23}if (v_chal = VERSION) then
    {24}if (msg_chal = CHALLENGE) then
    {21}let sskPTx_1: sskey = sskPTx in
    {28}event sendResp(sskPTx_1);
    {25}let h: bitstring = hash(productUnitCert) in
    {26}let hLSB: bitstring = LSB(h) in
    {27}let sig_1: bitstring = sign((h,v_chal,msg_chal,nonce_chal,VERSION,CHALLENGE_AUTH,hLSB),sskPTx_1) in
    {29}out(c, (VERSION,CHALLENGE_AUTH,hLSB,sig_1))
)

-- Query not attacker(sskPTx[]) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not attacker(sskPTx[])
RESULT not attacker(sskPTx[]) is true.
-- Query not event(successAuth(key)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not event(successAuth(key))
RESULT not event(successAuth(key)) is true.
-- Query event(successAuth(spk(key))) ==> event(sendResp(key)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query event(successAuth(spk(key))) ==> event(sendResp(key))
RESULT event(successAuth(spk(key))) ==> event(sendResp(key)) is true.
-- Query inj-event(successAuth(spk(key))) ==> inj-event(sendResp(key)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query inj-event(successAuth(spk(key))) ==> inj-event(sendResp(key))
RESULT inj-event(successAuth(spk(key))) ==> inj-event(sendResp(key)) is true.

--------------------------------------------------------------
Verification summary:

Query not attacker(sskPTx[]) is true.

Query not event(successAuth(key)) is true.

Query event(successAuth(spk(key))) ==> event(sendResp(key)) is true.

Query inj-event(successAuth(spk(key))) ==> inj-event(sendResp(key)) is true.

--------------------------------------------------------------

