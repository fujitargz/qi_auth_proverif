Process 0 (that is, the initial process):
{1}let spkPTx: spkey = spk(sskPTx) in
{2}out(c, spkPTx);
{3}new sskCA: sskey;
{4}let spkCA: spkey = spk(sskCA) in
{5}out(c, spkCA);
{6}let productUnitCert: bitstring = sign((IDPTx,spkPTx),sskCA) in
{7}new dummyCert: bitstring;
(
    {8}!
    {9}let cachedDigest: bitstring = hash(productUnitCert) in
    {10}let revocatedCert: bitstring = dummyCert in
    {11}out(c, (VERSION,GET_DIGESTS));
    {12}in(c, (v_dig: version,msg_dig: msgType,digest_dig: bitstring));
    {13}if (v_dig = VERSION) then
    {14}if (msg_dig = DIGESTS) then
    {15}if (digest_dig = cachedDigest) then
    {16}if (digest_dig = hash(revocatedCert)) then
        {17}event revocated(spkPTx)
    else
        {18}event notRevocated(spkPTx);
        {19}new nonce: bitstring;
        {20}out(c, (VERSION,CHALLENGE,nonce));
        {21}in(c, (v_chalAuth: version,msg_chalAuth: msgType,hLSB_chalAuth: bitstring,sig_chalAuth: bitstring));
        {22}if (v_chalAuth = VERSION) then
        {23}if (msg_chalAuth = CHALLENGE_AUTH) then
        {24}if checksign((digest_dig,VERSION,CHALLENGE,nonce,v_chalAuth,msg_chalAuth,hLSB_chalAuth),sig_chalAuth,spkPTx) then
        {25}event successAuth(spkPTx)
) | (
    {26}!
    {27}let IDPTx_1: ID = IDPTx in
    {28}let sskPTx_1: sskey = sskPTx in
    {29}in(c, (v_getDig: version,msg_getDig: msgType));
    {30}if (v_getDig = VERSION) then
    {31}if (msg_getDig = GET_DIGESTS) then
    {32}let h: bitstring = hash(productUnitCert) in
    {33}out(c, (VERSION,DIGESTS,h));
    {34}in(c, (v_chal: version,msg_chal: msgType,nonce_chal: bitstring));
    {35}if (v_chal = VERSION) then
    {36}if (msg_chal = CHALLENGE) then
    {37}let hLSB: bitstring = LSB(h) in
    {38}let sig: bitstring = sign((h,v_chal,msg_chal,nonce_chal,VERSION,CHALLENGE_AUTH,hLSB),sskPTx_1) in
    {39}event sendResp(sskPTx_1);
    {40}out(c, (VERSION,CHALLENGE_AUTH,hLSB,sig))
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}let spkPTx: spkey = spk(sskPTx) in
{2}out(c, spkPTx);
{3}new sskCA: sskey;
{4}let spkCA: spkey = spk(sskCA) in
{5}out(c, spkCA);
{7}new dummyCert: bitstring;
{6}let productUnitCert: bitstring = sign((IDPTx,spkPTx),sskCA) in
(
    {8}!
    {11}out(c, (VERSION,GET_DIGESTS));
    {12}in(c, (v_dig: version,msg_dig: msgType,digest_dig: bitstring));
    {13}if (v_dig = VERSION) then
    {14}if (msg_dig = DIGESTS) then
    {9}let cachedDigest: bitstring = hash(productUnitCert) in
    {15}if (digest_dig = cachedDigest) then
    {10}let revocatedCert: bitstring = dummyCert in
    {16}if (digest_dig = hash(revocatedCert)) then
        {17}event revocated(spkPTx)
    else
        {18}event notRevocated(spkPTx);
        {19}new nonce: bitstring;
        {20}out(c, (VERSION,CHALLENGE,nonce));
        {21}in(c, (v_chalAuth: version,msg_chalAuth: msgType,hLSB_chalAuth: bitstring,sig_chalAuth: bitstring));
        {22}if (v_chalAuth = VERSION) then
        {23}if (msg_chalAuth = CHALLENGE_AUTH) then
        {24}if checksign((digest_dig,VERSION,CHALLENGE,nonce,v_chalAuth,msg_chalAuth,hLSB_chalAuth),sig_chalAuth,spkPTx) then
        {25}event successAuth(spkPTx)
) | (
    {26}!
    {29}in(c, (v_getDig: version,msg_getDig: msgType));
    {30}if (v_getDig = VERSION) then
    {31}if (msg_getDig = GET_DIGESTS) then
    {32}let h: bitstring = hash(productUnitCert) in
    {33}out(c, (VERSION,DIGESTS,h));
    {34}in(c, (v_chal: version,msg_chal: msgType,nonce_chal: bitstring));
    {35}if (v_chal = VERSION) then
    {36}if (msg_chal = CHALLENGE) then
    {28}let sskPTx_1: sskey = sskPTx in
    {39}event sendResp(sskPTx_1);
    {37}let hLSB: bitstring = LSB(h) in
    {38}let sig: bitstring = sign((h,v_chal,msg_chal,nonce_chal,VERSION,CHALLENGE_AUTH,hLSB),sskPTx_1) in
    {40}out(c, (VERSION,CHALLENGE_AUTH,hLSB,sig))
)

-- Query not attacker(sskPTx[]) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not attacker(sskPTx[])
RESULT not attacker(sskPTx[]) is true.
-- Query event(successAuth(spk(key))) ==> event(sendResp(key)) && event(notRevocated(spk(key))) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query event(successAuth(spk(key))) ==> event(sendResp(key)) && event(notRevocated(spk(key)))
goal reachable: begin(sendResp(sskPTx[])) && begin(notRevocated(spk(sskPTx[]))) -> end(successAuth(spk(sskPTx[])))
RESULT event(successAuth(spk(key))) ==> event(sendResp(key)) && event(notRevocated(spk(key))) is true.
-- Query inj-event(successAuth(spk(key))) ==> inj-event(sendResp(key)) && inj-event(notRevocated(spk(key))) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query inj-event(successAuth(spk(key))) ==> inj-event(sendResp(key)) && inj-event(notRevocated(spk(key)))
goal reachable: begin(sendResp(sskPTx[]),@occ39_1) && begin(@p_act(@occ21_1,(VERSION,CHALLENGE_AUTH,LSB(hash(sign((IDPTx[],spk(sskPTx[])),sskCA[]))),sign((hash(sign((IDPTx[],spk(sskPTx[])),sskCA[])),VERSION,CHALLENGE,nonce_1,VERSION,CHALLENGE_AUTH,LSB(hash(sign((IDPTx[],spk(sskPTx[])),sskCA[])))),sskPTx[])))) && begin(notRevocated(spk(sskPTx[])),@occ18_1) -> end(@occ25_1,successAuth(spk(sskPTx[])))
The 1st, 2nd, 3rd hypotheses occur strictly before the conclusion.
Abbreviations:
nonce_1 = nonce[digest_dig = hash(sign((IDPTx[],spk(sskPTx[])),sskCA[])),msg_dig = DIGESTS,v_dig = VERSION,!1 = @sid]
@occ25_1 = @occ25[sig_chalAuth = sign((hash(sign((IDPTx[],spk(sskPTx[])),sskCA[])),VERSION,CHALLENGE,nonce_1,VERSION,CHALLENGE_AUTH,LSB(hash(sign((IDPTx[],spk(sskPTx[])),sskCA[])))),sskPTx[]),hLSB_chalAuth = LSB(hash(sign((IDPTx[],spk(sskPTx[])),sskCA[]))),msg_chalAuth = CHALLENGE_AUTH,v_chalAuth = VERSION,digest_dig = hash(sign((IDPTx[],spk(sskPTx[])),sskCA[])),msg_dig = DIGESTS,v_dig = VERSION,!1 = @sid]
@occ39_1 = @occ39[nonce_chal = nonce_1,msg_chal = CHALLENGE,v_chal = VERSION,msg_getDig = GET_DIGESTS,v_getDig = VERSION,!1 = @sid_1]
@occ21_1 = @occ21[!1 = @sid]
@occ18_1 = @occ18[digest_dig = hash(sign((IDPTx[],spk(sskPTx[])),sskCA[])),msg_dig = DIGESTS,v_dig = VERSION,!1 = @sid]
RESULT inj-event(successAuth(spk(key))) ==> inj-event(sendResp(key)) && inj-event(notRevocated(spk(key))) is true.

--------------------------------------------------------------
Verification summary:

Query not attacker(sskPTx[]) is true.

Query event(successAuth(spk(key))) ==> event(sendResp(key)) && event(notRevocated(spk(key))) is true.

Query inj-event(successAuth(spk(key))) ==> inj-event(sendResp(key)) && inj-event(notRevocated(spk(key))) is true.

--------------------------------------------------------------

