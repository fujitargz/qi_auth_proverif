Process 0 (that is, the initial process):
{1}let spkPTx: spkey = spk(sskPTx) in
{2}out(c, spkPTx);
{3}new sskCA: sskey;
{4}let spkCA: spkey = spk(sskCA) in
{5}out(c, spkCA);
{6}let productUnitCert: bitstring = sign((IDPTx,spkPTx),sskCA) in
{7}new dummyCert: bitstring;
{8}new dummySpk: spkey;
(
    {9}!
    {10}let cachedDigest: bitstring = dummyCert in
    {11}let cachedKey: spkey = dummySpk in
    {12}out(c, (VERSION,GET_DIGESTS));
    {13}in(c, (v_dig: version,msg_dig: msgType,digest_dig: bitstring));
    {14}if (v_dig = VERSION) then
    {15}if (msg_dig = DIGESTS) then
    {16}if (digest_dig ≠ cachedDigest) then
    {17}out(c, (VERSION,GET_CERTIFICATE));
    {18}in(c, (v_cert: version,msg_cert: msgType,ID_cert: ID,spk_cert: spkey,cert_cert: bitstring));
    {19}if (v_cert = VERSION) then
    {20}if (msg_cert = CERTIFICATE) then
    {21}if checksign((ID_cert,spk_cert),cert_cert,spkCA) then
    {22}new nonce: bitstring;
    {23}out(c, (VERSION,CHALLENGE,nonce));
    {24}in(c, (v_chalAuth: version,msg_chalAuth: msgType,hLSB_chalAuth: bitstring,sig_chalAuth: bitstring));
    {25}if (v_chalAuth = VERSION) then
    {26}if (msg_chalAuth = CHALLENGE_AUTH) then
    {27}if checksign((hash(cert_cert),VERSION,CHALLENGE,nonce,v_chalAuth,msg_chalAuth,hLSB_chalAuth),sig_chalAuth,spk_cert) then
    {28}event successAuth(spk_cert)
) | (
    {29}!
    {30}let IDPTx_1: ID = IDPTx in
    {31}let sskPTx_1: sskey = sskPTx in
    {32}in(c, (v_getDig: version,msg_getDig: msgType));
    {33}if (v_getDig = VERSION) then
    {34}if (msg_getDig = GET_DIGESTS) then
    {35}let h: bitstring = hash(productUnitCert) in
    {36}out(c, (VERSION,DIGESTS,h));
    {37}in(c, (v_getCert: version,msg_getCert: msgType));
    {38}if (v_getCert = VERSION) then
    {39}if (msg_getCert = GET_CERTIFICATE) then
    {40}out(c, (VERSION,CERTIFICATE,IDPTx_1,spkPTx,productUnitCert));
    {41}in(c, (v_chal: version,msg_chal: msgType,nonce_chal: bitstring));
    {42}if (v_chal = VERSION) then
    {43}if (msg_chal = CHALLENGE) then
    {44}let hLSB: bitstring = LSB(h) in
    {45}let sig: bitstring = sign((h,v_chal,msg_chal,nonce_chal,VERSION,CHALLENGE_AUTH,hLSB),sskPTx_1) in
    {46}event sendResp(sskPTx_1);
    {47}out(c, (VERSION,CHALLENGE_AUTH,hLSB,sig))
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}let spkPTx: spkey = spk(sskPTx) in
{2}out(c, spkPTx);
{3}new sskCA: sskey;
{4}let spkCA: spkey = spk(sskCA) in
{5}out(c, spkCA);
{7}new dummyCert: bitstring;
{8}new dummySpk: spkey;
(
    {9}!
    {12}out(c, (VERSION,GET_DIGESTS));
    {13}in(c, (v_dig: version,msg_dig: msgType,digest_dig: bitstring));
    {14}if (v_dig = VERSION) then
    {15}if (msg_dig = DIGESTS) then
    {10}let cachedDigest: bitstring = dummyCert in
    {16}if (digest_dig ≠ cachedDigest) then
    {17}out(c, (VERSION,GET_CERTIFICATE));
    {18}in(c, (v_cert: version,msg_cert: msgType,ID_cert: ID,spk_cert: spkey,cert_cert: bitstring));
    {19}if (v_cert = VERSION) then
    {20}if (msg_cert = CERTIFICATE) then
    {21}if checksign((ID_cert,spk_cert),cert_cert,spkCA) then
    {22}new nonce: bitstring;
    {23}out(c, (VERSION,CHALLENGE,nonce));
    {24}in(c, (v_chalAuth: version,msg_chalAuth: msgType,hLSB_chalAuth: bitstring,sig_chalAuth: bitstring));
    {25}if (v_chalAuth = VERSION) then
    {26}if (msg_chalAuth = CHALLENGE_AUTH) then
    {27}if checksign((hash(cert_cert),VERSION,CHALLENGE,nonce,v_chalAuth,msg_chalAuth,hLSB_chalAuth),sig_chalAuth,spk_cert) then
    {28}event successAuth(spk_cert)
) | (
    {29}!
    {32}in(c, (v_getDig: version,msg_getDig: msgType));
    {33}if (v_getDig = VERSION) then
    {34}if (msg_getDig = GET_DIGESTS) then
    {6}let productUnitCert: bitstring = sign((IDPTx,spkPTx),sskCA) in
    {35}let h: bitstring = hash(productUnitCert) in
    {36}out(c, (VERSION,DIGESTS,h));
    {37}in(c, (v_getCert: version,msg_getCert: msgType));
    {38}if (v_getCert = VERSION) then
    {39}if (msg_getCert = GET_CERTIFICATE) then
    {30}let IDPTx_1: ID = IDPTx in
    {40}out(c, (VERSION,CERTIFICATE,IDPTx_1,spkPTx,productUnitCert));
    {41}in(c, (v_chal: version,msg_chal: msgType,nonce_chal: bitstring));
    {42}if (v_chal = VERSION) then
    {43}if (msg_chal = CHALLENGE) then
    {31}let sskPTx_1: sskey = sskPTx in
    {46}event sendResp(sskPTx_1);
    {44}let hLSB: bitstring = LSB(h) in
    {45}let sig: bitstring = sign((h,v_chal,msg_chal,nonce_chal,VERSION,CHALLENGE_AUTH,hLSB),sskPTx_1) in
    {47}out(c, (VERSION,CHALLENGE_AUTH,hLSB,sig))
)

-- Query not attacker(sskPTx[]) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not attacker(sskPTx[])
RESULT not attacker(sskPTx[]) is true.
-- Query event(successAuth(spk(key))) ==> event(sendResp(key)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query event(successAuth(spk(key))) ==> event(sendResp(key))
goal reachable: begin(sendResp(sskPTx[])) -> end(successAuth(spk(sskPTx[])))
RESULT event(successAuth(spk(key))) ==> event(sendResp(key)) is true.
-- Query inj-event(successAuth(spk(key))) ==> inj-event(sendResp(key)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query inj-event(successAuth(spk(key))) ==> inj-event(sendResp(key))
goal reachable: digest_dig_1 ≠ dummyCert[] && begin(sendResp(sskPTx[]),@occ46_1) && attacker(digest_dig_1) -> end(@occ28_1,successAuth(spk(sskPTx[])))
The 1st hypothesis occurs strictly before the conclusion.
The 2nd hypothesis occurs before the conclusion.
Abbreviations:
nonce_1 = nonce[cert_cert = sign((IDPTx[],spk(sskPTx[])),sskCA[]),spk_cert = spk(sskPTx[]),ID_cert = IDPTx[],msg_cert = CERTIFICATE,v_cert = VERSION,digest_dig = digest_dig_1,msg_dig = DIGESTS,v_dig = VERSION,!1 = @sid]
@occ28_1 = @occ28[sig_chalAuth = sign((hash(sign((IDPTx[],spk(sskPTx[])),sskCA[])),VERSION,CHALLENGE,nonce_1,VERSION,CHALLENGE_AUTH,LSB(hash(sign((IDPTx[],spk(sskPTx[])),sskCA[])))),sskPTx[]),hLSB_chalAuth = LSB(hash(sign((IDPTx[],spk(sskPTx[])),sskCA[]))),msg_chalAuth = CHALLENGE_AUTH,v_chalAuth = VERSION,cert_cert = sign((IDPTx[],spk(sskPTx[])),sskCA[]),spk_cert = spk(sskPTx[]),ID_cert = IDPTx[],msg_cert = CERTIFICATE,v_cert = VERSION,digest_dig = digest_dig_1,msg_dig = DIGESTS,v_dig = VERSION,!1 = @sid]
@occ46_1 = @occ46[nonce_chal = nonce_1,msg_chal = CHALLENGE,v_chal = VERSION,msg_getCert = GET_CERTIFICATE,v_getCert = VERSION,msg_getDig = GET_DIGESTS,v_getDig = VERSION,!1 = @sid_1]
RESULT inj-event(successAuth(spk(key))) ==> inj-event(sendResp(key)) is true.

--------------------------------------------------------------
Verification summary:

Query not attacker(sskPTx[]) is true.

Query event(successAuth(spk(key))) ==> event(sendResp(key)) is true.

Query inj-event(successAuth(spk(key))) ==> inj-event(sendResp(key)) is true.

--------------------------------------------------------------

